{"version":3,"sources":["../src/test/usage.js"],"names":[],"mappings":"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","file":"usage.js","sourcesContent":["import { story, poem, put, call, callback, take } from '../'\nimport test from '../tape'\nimport util from 'util'\n\nconst count = poem.wrap(function * count (min, max) {\n  for (let i = min; i <= max; i++) {\n    yield put(i)\n  }\n})\n\nconst double = x => 2 * x\nconst triple = x => 3 * x\n\ntest('story.wrap syntax', function * (t) {\n  let join = story.wrap(function * join (...values) {\n    return values.join(' ')\n  })\n\n  let msg = yield join('Hello,', 'World!')\n  t.equal(msg, 'Hello, World!')\n})\n\ntest('epic(fn).promised(...args) syntax', function * (t) {\n  let values = ['Hello,', 'World!']\n\n  let msg = yield story(function * join () {\n    return values.join(' ')\n  })\n\n  t.equal(msg, 'Hello, World!')\n})\n\ntest('basic generator usage', function * (t) {\n  let it = count(0, 3)\n\n  let next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 0)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 1)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 2)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 3)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, undefined)\n  t.equal(next.done, true)\n})\n\ntest('fancy generator usage', function * (t) {\n  const countDouble = poem.wrap(function * count (min, max) {\n    for (let i = min; i <= max; i++) {\n      let i2 = yield call(double, i)\n      yield put(i2)\n    }\n  })\n\n  let it = countDouble(4, 5)\n\n  let next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 8)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, 10)\n  t.equal(next.done, false)\n\n  next = it.next()\n  t.ok(next.value instanceof Promise)\n  t.equal(next.done, false)\n  next = yield next.value\n  t.equal(next.value, undefined)\n  t.equal(next.done, true)\n})\n\ntest('take(iterator)', function * (t) {\n  let collection = []\n  let it = count(1, 8)\n  let item\n  while ((item = yield take(it))) {\n    collection.push(item)\n  }\n  t.deepEqual(collection, [1, 2, 3, 4, 5, 6, 7, 8])\n})\n\ntest('take(iterator, output)', function * (t) {\n  let collection = []\n  let it = count(0, 5)\n  let item = {}\n  while (yield take(it, item)) {\n    collection.push(item.value)\n  }\n  t.deepEqual(collection, [0, 1, 2, 3, 4, 5])\n})\n\ntest('callback(context, fn, ...args)', function * (t) {\n  // This test throws 32 different sets of arguments at the callback export\n  // Woah\n\n  let obj = {}\n  let noop = () => {}\n  const OPTIONAL = Symbol()\n\n  let permutations = [\n    [noop, [obj, noop]],\n    [1, 'hi', Symbol(), OPTIONAL],\n    [1, 'hi', Symbol(), OPTIONAL]\n  ]\n\n  let expectations\n  for (let options of permutations) {\n    if (expectations) {\n      let newExpectations = []\n      for (let expectation of expectations) {\n        for (let option of options) {\n          if (option === OPTIONAL) break\n          if (!Array.isArray(option)) {\n            option = [option]\n          }\n          newExpectations.push(expectation.concat(option))\n        }\n      }\n      expectations = expectations.concat(newExpectations)\n    } else {\n      expectations = options.map(opt => Array.isArray(opt) ? opt : [opt])\n    }\n  }\n\n  for (let spec of expectations) {\n    let expected = [callback, ...(spec[0] === noop ? [null].concat(spec) : spec)]\n    t.deepEqual(\n      callback(...spec), expected,\n      `callback(${spec.map(util.inspect).join(', ')}) === [${expected.map(util.inspect).join(', ')}]`\n    )\n  }\n})\n\ntest('nested yields', function * (t) {\n  let results = yield [\n    call(double, 1.5),\n    call(double, 8),\n    call(triple, -0.5),\n    [\n      Promise.resolve(5),\n      call(triple, 8),\n      [\n        call(double, 8),\n        false\n      ]\n    ]\n  ]\n  t.deepEqual(results, [3, 16, -1.5, [5, 24, [16, false]]])\n\n  results = yield {\n    first: 1,\n    second: Promise.resolve(2),\n    third: call(double, 1.5),\n    fourth: [\n      Promise.resolve(4),\n      call(double, 2.5),\n      {\n        fifth: 5,\n        sixth: {\n          seventh: call(double, 3.5)\n        }\n      }\n    ]\n  }\n\n  t.deepEqual(results, {\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: [4, 5, {\n      fifth: 5,\n      sixth: {\n        seventh: 7\n      }\n    }]\n  })\n})\n"]}